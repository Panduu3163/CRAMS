services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crams-postgres
    environment:
      POSTGRES_DB: crams_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - crams-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build: .
    container_name: crams-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: crams_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      JWT_SECRET: your_super_secret_jwt_key_change_this_in_production
      JWT_EXPIRE: 7d
      CLIENT_URL: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - crams-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Frontend React App
  frontend:
    build: ./client
    container_name: crams-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - crams-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: crams-redis
    ports:
      - "6379:6379"
    networks:
      - crams-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  crams-network:
    driver: bridge
